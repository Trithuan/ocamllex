type token =
  | ADD
  | SUB
  | MUL
  | DIV
  | EXP
  | PARO
  | PARF
  | EQU
  | SEP
  | INT of (int)
  | FLOAT of (float)
  | VAR of (string)

open Parsing;;
let _ = parse_error;;
# 2 "parsecalc.mly"
(*prÃ©ambule*)
(* output message *)
let string_of_numeric n = "# float:"^string_of_float n ;;
(*symbole table*)
let tabsymbol = Hashtbl.create 10;;

# 25 "parsecalc.ml"
let yytransl_const = [|
  257 (* ADD *);
  258 (* SUB *);
  259 (* MUL *);
  260 (* DIV *);
  261 (* EXP *);
  262 (* PARO *);
  263 (* PARF *);
  264 (* EQU *);
  265 (* SEP *);
    0|]

let yytransl_block = [|
  266 (* INT *);
  267 (* FLOAT *);
  268 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\003\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\001\000\001\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\009\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\007\000\008\000"

let yysindex = "\255\255\
\001\255\000\000\001\255\000\000\000\000\253\254\009\255\040\255\
\031\255\001\255\001\255\001\255\001\255\001\255\001\255\001\255\
\000\000\040\255\040\255\255\254\255\254\012\255\003\255\003\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\020\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\015\000\031\000\040\000\028\000\010\000\019\000"

let yygindex = "\000\000\
\000\000\011\000"

let yytablesize = 305
let yytable = "\001\000\
\012\000\014\000\015\000\016\000\010\000\002\000\003\000\016\000\
\011\000\006\000\004\000\005\000\006\000\009\000\001\000\015\000\
\016\000\011\000\007\000\013\000\018\000\019\000\020\000\021\000\
\022\000\023\000\024\000\005\000\000\000\000\000\003\000\012\000\
\013\000\014\000\015\000\016\000\000\000\017\000\000\000\004\000\
\012\000\013\000\014\000\015\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\012\000\012\000\012\000\012\000\000\000\012\000\
\000\000\012\000\006\000\006\000\006\000\006\000\002\000\011\000\
\006\000\011\000\006\000\007\000\007\000\007\000\007\000\001\000\
\000\000\007\000\000\000\007\000\005\000\005\000\005\000\003\000\
\003\000\000\000\005\000\000\000\005\000\003\000\000\000\003\000\
\004\000\004\000\000\000\000\000\000\000\000\000\004\000\000\000\
\004\000"

let yycheck = "\001\000\
\000\000\003\001\004\001\005\001\008\001\000\000\006\001\005\001\
\000\000\000\000\010\001\011\001\012\001\003\000\000\000\004\001\
\005\001\009\001\000\000\000\000\010\000\011\000\012\000\013\000\
\014\000\015\000\016\000\000\000\255\255\255\255\000\000\001\001\
\002\001\003\001\004\001\005\001\255\255\007\001\255\255\000\000\
\001\001\002\001\003\001\004\001\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\255\255\007\001\
\255\255\009\001\001\001\002\001\003\001\004\001\009\001\007\001\
\007\001\009\001\009\001\001\001\002\001\003\001\004\001\009\001\
\255\255\007\001\255\255\009\001\001\001\002\001\003\001\001\001\
\002\001\255\255\007\001\255\255\009\001\007\001\255\255\009\001\
\001\001\002\001\255\255\255\255\255\255\255\255\007\001\255\255\
\009\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  EXP\000\
  PARO\000\
  PARF\000\
  EQU\000\
  SEP\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : unit) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parsecalc.mly"
                  (print_endline (string_of_numeric _3))
# 182 "parsecalc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 31 "parsecalc.mly"
       (print_endline (string_of_numeric _1))
# 189 "parsecalc.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parsecalc.mly"
                  (_1 +. _3)
# 197 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parsecalc.mly"
                  (_1 -. _3)
# 205 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parsecalc.mly"
                  (_1 *. _3)
# 213 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parsecalc.mly"
                  (_1 /. _3)
# 221 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parsecalc.mly"
                  (_1 ** _3)
# 229 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 39 "parsecalc.mly"
                  (_2)
# 236 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 40 "parsecalc.mly"
                  (float_of_int _1)
# 243 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 41 "parsecalc.mly"
                  (_1)
# 250 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 42 "parsecalc.mly"
                  (Hashtbl.add tabsymbol _1 _3; _3)
# 258 "parsecalc.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 43 "parsecalc.mly"
                  (Hashtbl.find tabsymbol _1)
# 265 "parsecalc.ml"
               : 'expr))
(* Entry statement *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let statement (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
;;
